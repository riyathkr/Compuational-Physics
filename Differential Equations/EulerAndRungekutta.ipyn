{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def euler(h,t0,y,t):\n",
    "    while t0<t:\n",
    "        y=y+h*dydt(t0,y)\n",
    "        t0=t0+h\n",
    "    return(y)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def midpoint(h,t0,y,t):\n",
    "    n=round((t-t0)/h);\n",
    "    for i in range(1,n+1):\n",
    "        k1 = h * dydt(t0, y);  \n",
    "        k2 = h * dydt(t0 + 0.5 * h, y + 0.5 * k1);  \n",
    "  \n",
    "        # Update next value of y  \n",
    "        y = y + (1.0 / 6.0) * (k1 + 2 * k2);  \n",
    "  \n",
    "        # Update next value of t  \n",
    "        t0 = t0 + h;  \n",
    "    return(y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rungekutta(h,t0,y,t):\n",
    "    n = (int)((t - t0)/h)  \n",
    "    # Iterate for number of iterations  \n",
    "    for i in range(1, n + 1): \n",
    "        \"Apply Runge Kutta Formulas to find next value of y\"\n",
    "        k1 = h * dydt(t0, y) \n",
    "        k2 = h * dydt(t0 + 0.5 * h, y + 0.5 * k1) \n",
    "        k3 = h * dydt(t0 + 0.5 * h, y + 0.5 * k2) \n",
    "        k4 = h * dydt(t0 + h, y + k3) \n",
    "  \n",
    "        # Update next value of y \n",
    "        y = y + (1.0 / 6.0)*(k1 + 2 * k2 + 2 * k3 + k4) \n",
    "  \n",
    "        # Update next value of x \n",
    "        t0 = t0 + h \n",
    "    return(y) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dydt(t,y):\n",
    "    return(-t*y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For dy/dt = -t*y\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter h value 0.025\n",
      "enter t, for which y(t) needs to be found 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "value of y(t) at 2.0 found through solving differential eqn analytically is 0.1353352832366127\n",
      "------------------------------------------------------------------------- \n",
      "\n",
      "Euler method :\n",
      "value of y(t) at 2.0  found through euler method is equal to 0.12747411949446316\n",
      "error = -0.00786116374214954 \n",
      "\n",
      "------------------------------------------------------------------------- \n",
      "\n",
      "Mid-point method :\n",
      "value of y(t) at 2.0  found through mid-point method is equal to 0.3704621718521027\n",
      "error = 0.23512688861548997  \n",
      "\n",
      "------------------------------------------------------------------------- \n",
      "\n",
      "Runge-Kutta method :\n",
      "value of y(t) at 2.0  found through runge-kutta method is equal to 0.1353352880676892\n",
      "error = 4.8310765110581855e-09 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "from math import exp\n",
    "print(\"For dy/dt = -t*y\")\n",
    "h=float(input('enter h value'))\n",
    "t0=0\n",
    "y=1\n",
    "t=float(input('enter t, for which y(t) needs to be found'))\n",
    "print('value of y(t) at',t,'found through solving differential eqn analytically is',exp(-(t)**2/2))\n",
    "print('------------------------------------------------------------------------- \\n')\n",
    "print(\"Euler method :\")\n",
    "print('value of y(t) at',t,\" found through euler method is equal to\",euler(h,t0,y,t))\n",
    "print('error =',euler(h,t0,y,t)-exp(-(t)**2/2),\"\\n\")\n",
    "print('------------------------------------------------------------------------- \\n')\n",
    "print(\"Mid-point method :\")\n",
    "print('value of y(t) at',t,\" found through mid-point method is equal to\",midpoint(h,t0,y,t))\n",
    "print('error =',midpoint(h,t0,y,t)-exp(-(t)**2/2),\" \\n\")\n",
    "print('------------------------------------------------------------------------- \\n')\n",
    "print(\"Runge-Kutta method :\")\n",
    "print('value of y(t) at',t,\" found through runge-kutta method is equal to\",rungekutta(h,t0,y,t))\n",
    "print('error =',rungekutta(h,t0,y,t)-exp(-(t)**2/2),\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dydt(t,y):\n",
    "    return(y/t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For dy/dt = t\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter h value 0.025\n",
      "enter t, for which y(t) needs to be found 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "value of y(t) at 2.0 found through solving differential eqn analytically is 14.7781121978613\n",
      "------------------------------------------------------------------------- \n",
      "\n",
      "Euler method :\n",
      "value of y(t) at 2.0  found through euler method is equal to 14.962838600334583\n",
      "error = 0.18472640247328265 \n",
      "\n",
      "------------------------------------------------------------------------- \n",
      "\n",
      "Mid-point method :\n",
      "value of y(t) at 2.0  found through mid-point method is equal to 10.466043027248805\n",
      "error = -4.312069170612496  \n",
      "\n",
      "------------------------------------------------------------------------- \n",
      "\n",
      "Runge-Kutta method :\n",
      "value of y(t) at 2.0  found through runge-kutta method is equal to 14.778112197861317\n",
      "error = 1.5987211554602254e-14 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"For dy/dt = t\")\n",
    "h=float(input('enter h value'))\n",
    "t0=1\n",
    "y=exp(2)\n",
    "t=float(input('enter t, for which y(t) needs to be found'))\n",
    "actual=t*exp(2)\n",
    "print('value of y(t) at',t,'found through solving differential eqn analytically is',actual)\n",
    "print('------------------------------------------------------------------------- \\n')\n",
    "print(\"Euler method :\")\n",
    "print('value of y(t) at',t,\" found through euler method is equal to\",euler(h,t0,y,t))\n",
    "print('error =',euler(h,t0,y,t)-actual,\"\\n\")\n",
    "print('------------------------------------------------------------------------- \\n')\n",
    "print(\"Mid-point method :\")\n",
    "print('value of y(t) at',t,\" found through mid-point method is equal to\",midpoint(h,t0,y,t))\n",
    "print('error =',midpoint(h,t0,y,t)-actual,\" \\n\")\n",
    "print('------------------------------------------------------------------------- \\n')\n",
    "print(\"Runge-Kutta method :\")\n",
    "print('value of y(t) at',t,\" found through runge-kutta method is equal to\",rungekutta(h,t0,y,t))\n",
    "print('error =',rungekutta(h,t0,y,t)-actual,\"\\n\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dydt(t,y):\n",
    "    return((t-y)/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For dy/dt = (t-y)/2\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter h value 0.025\n",
      "enter t, for which y(t) needs to be found 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "value of y(t) at 2.0 found through solving differential eqn analytically is 1.4715177646857693\n",
      "------------------------------------------------------------------------- \n",
      "\n",
      "Euler method :\n",
      "value of y(t) at 2.0  found through euler method is equal to 0.7469970844930556\n",
      "error = -0.7245206801927138 \n",
      "\n",
      "------------------------------------------------------------------------- \n",
      "\n",
      "Mid-point method :\n",
      "value of y(t) at 2.0  found through mid-point method is equal to 0.4241124814531992\n",
      "error = -1.0474052832325702  \n",
      "\n",
      "------------------------------------------------------------------------- \n",
      "\n",
      "Runge-Kutta method :\n",
      "value of y(t) at 2.0  found through runge-kutta method is equal to 0.7357588824941426\n",
      "error = -0.7357588821916268 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"For dy/dt = (t-y)/2\")\n",
    "h=float(input('enter h value'))\n",
    "t0=0\n",
    "y=0\n",
    "t=float(input('enter t, for which y(t) needs to be found'))\n",
    "actual=2*t-4+4*exp(-t/2);\n",
    "print('value of y(t) at',t,'found through solving differential eqn analytically is',actual)\n",
    "print('------------------------------------------------------------------------- \\n')\n",
    "print(\"Euler method :\")\n",
    "print('value of y(t) at',t,\" found through euler method is equal to\",euler(h,t0,y,t))\n",
    "print('error =',euler(h,t0,y,t)-actual,\"\\n\")\n",
    "print('------------------------------------------------------------------------- \\n')\n",
    "print(\"Mid-point method :\")\n",
    "print('value of y(t) at',t,\" found through mid-point method is equal to\",midpoint(h,t0,y,t))\n",
    "print('error =',midpoint(h,t0,y,t)-actual,\" \\n\")\n",
    "print('------------------------------------------------------------------------- \\n')\n",
    "print(\"Runge-Kutta method :\")\n",
    "print('value of y(t) at',t,\" found through runge-kutta method is equal to\",rungekutta(h,t0,y,t))\n",
    "print('error =',rungekutta(h,t0,y,t)-actual,\"\\n\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
